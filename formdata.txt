topology : json = {
    "node": [
        {
            "id": 1,
            "role": "Ingress", // ["Ingress", "Switch", "DataCentre"]
            "topo": ""
        },
        {
            "id": 2,
            "role": "DataCentre",
            "topo": "fat_tree",
            "arg": [
                4,
                {"basePower": 39, "portPower": [0.42, 0.48, 0.9]}
                {"RAM": 4, "power": [205.1, 232.9, 260.7, 288.6, 316.4]}
            ]
        }
    ],
    "link": []
}

topology : networkx.Graph() = {
    node: [ // node id start from 1
        (1, {
            "type": "Ingress" // ["Ingress", "DataCentre", "SwitchNode"]
        }),
        (2, {
            "type": "DataCentre" // ["Ingress", "DataCentre", "SwitchNode"]
        })
    ],
    edge: [
        (1, 2, {
            "bw": [10000, 131], // [capacity, usage], initial: [10000, 0]
            "pr": 0
        })
    ]
}



sim = Sumulator(topology, folder_log, )





class Simulator {
    env = simpy.Environment()
    topology : networkx.Graph() = {
        node: [ // node id start from 1
            (1, {
                "type": "Ingress" // ["Ingress", "DataCentre", "SwitchNode"]
            }),
            (2, {
                "type": "DataCentre" // ["Ingress", "DataCentre", "SwitchNode"]
            })
        ],
        edge: [
            (1, 2, {
                "bw": [10000, 131], // [capacity, usage]
                "pr": 0
            })
        ]
    }
    dataCentres = [] // list of DataCentre
    ingresses = [] // list of Ingress
    strategy = "strategy_1"
    SFCs = [] // list of SFC
    logger = Logger()

    run(runtime)
}



class Application() {
    name = "SimpleApp"
    distribution : Distribution()
    selector: Selector()
    arg = [] // anything
}

SFC = {
    "id": 1,
    "app": "SimpleCase"
    "outLink": 56, // bandwidth of out link which connect this SFC in DC to Ingress
    "struct" : networkx.Graph() = {
        node: [
            (1, { // vnf id start from 1
                "SFC": 1 // belong to SFC-1
                "RAM": 1 // always = 1
                "place": [2, 3] // [DataCentre, server]
            })
        ],
        edges : [
            (1, 2, {
                "bw": 12 // bw of virtual link
            })
        ]
    }
    "TTL": 32
}

Selector.analyse() = {
    "node": [
        [0, 25], // [vnf, server]
        [1, 23]
    ],
    "link": [
        {
            "bw": 60,
            "route": [26, 15, 7, 1, 5, 14, 24]
        }
    ]
    "sfc": SFC
}


class Distribution {

}

class Selector {
    analyse(DataCentre.topology, SFC) {
        _topo = DataCentre.topology.deepcopy() //IMPORTANT: make sure that this function doesnt change status of node and link in topo
        if(can deploy):
            return result = {
                "deploy": { // mandatory field
                    "sfc": "1",
                    "node": [
                        [0, 25], // [vnf, server]
                        [1, 23]
                    ],
                    "link": [
                        {
                            "bw": 60,
                            "route": [26, 15, 7, 1, 5, 14, 24]
                        }
                    ]
                }
            }
    }
}



class Ingress {
    apps = [] // list of Application
}


class DataCentre: {
    topology : networkx.Graph() = {
        node: [ // node id start from 1
            (1, {
                "model": "switch", // ["switch", "server"]
                "tag": "core", // ["core", "aggregation", "edge"]
                "status": True // [True, False]
                "basePower": 39,
                "portPower": [0.42, 0.48, 0.9],
            }),
            (2, {
                "model": "server",
                "RAM": [4, 0] // [capacity, usage]
                "power": [205.1, 232.9, 260.7, 288.6, 316.4],
                "deployed": [
                    [1, 0], [2, 3], [2, 5], [3, 2]
                ] // [sfc, vnf]
            })
        ],
        edge: [
            (1, 2, {
                "bw": [1000, 90] // [capacity, usage]
            })
        ]
    }
}







topology = {
    "node": [
        {
            "model": "switch", // mandatory
            "tag": "core", // [core, aggregation, edge]
            "basePower": 39,
            "portPower": [0.42, 0.48, 0.9],
        },
        {
            "model": "server",
            "RAM": 4,
            "power": [205.1, 232.9, 260.7, 288.6, 316.4],
            "deployed": [
                [1, 0], [2, 3], [2, 5], [3, 2]
            ] # [sfc, vnf]
        }
    ],
    "link": [
        {
            "s": 0,
            "d": 1,
            "bw": 1000,
            "usage": 90
        }
    ]
}

sfc["structure"] = {
    "VNF": [
        {
            "id": 0,
            "SFC": 1,
            "RAM": 1,
            "onServer": 2
        }
    ],
    "vLink": [
        {
            "s": 0,
            "d": 1,
            "bw": 60
        }
    ]
}


